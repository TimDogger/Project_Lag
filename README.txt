На время выполнения задания ушло примерно 26 часов.


Основные сложности заключались с функционалом записывания состояний акторов. Были различного рода вопросы:
1) Какой длины должен быть контейнер, который хранит состояния и какой именно контейнер (TArray, TList, TRingBuffer и т.д.);
2) Просесс записи новых данных и удаление старых (чтобы размер контейнера не расширялся со временем);
3) Интерполяция положения актора при найденных граничных положениях;
4) Очень долгое время не мог найти проблему когда казалось все готовым. Проблема заключалась в том, что я использовал Ping, который при расчете делится на 4.


Инструкция для тестирования:
1) Запустить проект;
2) Открыть карту FirstPersonExampleMap;
3) Выбрать режим запуска Listen Server с 2мя игроками;
4) Запустить игру;
5) На Сервере встать на белую рампу и направить взгляд на щель между 2мя прозрачными блоками. Так будет удобней наблюдать за дебаг инфой;
6) На Клиенте встать межу Сервером и щелью, направить взгляд в щель и начать стрелять по проходящим ботам. 
Для тестрирования с задержкой включить Clumsy и повторить шаги.


При выстреле отрисовывается:
1) Белый луч - на клиенте. Рисуется в момент выстрела (в том же кадре);
2) Красный луч - на сервере. Рисуется в момент расчета выстрела (с компенсацией с учетом пинга);
3) Оранжевый луч - красный луч, который мультикастится у всех для дебага; 
4) Красная капсула - более "молодое" положение актора;
5) Синяя капсула - более "старое" положение актора;
6) Желтая капсула - интерполируемое положение актора между синей и красной капсулами. Если луч попадает в нее, то регистрируется Hit и спавнится SERVER HIT.

SERVER-HIT - дебаг актор, который отображает место, где был зарегистрирован Hit